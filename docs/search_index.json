[["index.html", "TFcheckpoint Dataset visualization using UMAP Input Intro Analysis Tuning the number of neighbors GREEKC curated DbTF list Tuning minimum distance GREEKC curated co-TF list R session info References", " TFcheckpoint Dataset visualization using UMAP John Zobolas Last updated: 25 November, 2020 Input Loading libraries: library(xfun) library(dplyr) library(scales) Intro TFcheckpoint (Chawla et al. 2013) is a curated database with sequence-specific DNA-binding RNA polymerase II transcription-factor proteins (DbTFs). The form of the dataset is as follows: a total of \\(4705\\) proteins, each one represented by a row, are enriched with GO annotations (a total of \\(8621\\) GO terms (Carbon et al. 2019)) that indicate the presence (\\(1\\)) or absence (\\(0\\)) of a particular molecular function. The dataset is provided as a tab-delimited file. In this analysis we present a 2D visualization of this dataset using the non-linear dimension reduction method UMAP (McInnes, Healy, and Melville 2018). This method will reduce the size of the dataset from \\((4705 \\times 8621)\\) to \\((4705 \\times 2)\\) while efficiently identifying groups of proteins with the same molecular characterization. These groups are indicated by varying size clusters in the 2D plane. Analysis See script umap.R for more details about the presented analysis. Tuning the number of neighbors We first run the UMAP on the dataset in unsupervised mode to see how well it clusters the GO-enriched protein data. We used the default euclidean distance metric to find nearest neighbors for every data point (GO-annotated protein). We first tune one of the most important parameters, i.e. the number of neighbors, where larger values result in more global views of the dataset, while smaller values result in more local data being preserved. After UMAP returns the 2D optimized coordinates for the proteins, we color each protein according to its corresponding value for the DNA binding GO term, in order to assess if UMAP can at least distinguish between DNA binding (DbTFs) and non DNA-binding TFs (non-DbTFs). knitr::include_graphics(path = &#39;img/tf_umap_2n.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_4n.png&#39;) Figure 1: Unsupervised UMAP of the TFcheckpoint dataset using 2 and 4 neighbors. DbTFs are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_6n.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_8n.png&#39;) Figure 2: Unsupervised UMAP of the TFcheckpoint dataset using 6 and 8 neighbors. DbTFs are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_10n.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_12n.png&#39;) Figure 3: Unsupervised UMAP of the TFcheckpoint dataset using 10 and 12 neighbors. DbTFs proteins are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_14n.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_15n.png&#39;) Figure 4: Unsupervised UMAP of the TFcheckpoint dataset using 14 and 15 neighbors. DbTFs are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_17n.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_20n.png&#39;) Figure 5: Unsupervised UMAP of the TFcheckpoint dataset using 17 and 20 neighbors. DbTFs are colored atop the 2D embedding. Lastly, using as basis the embedding with \\(12\\) neighbors, we annotate two cases of DbTFs that stand out from the clustered data: knitr::include_graphics(path = &#39;img/12n_extra/tf_umap_12n_annot.png&#39;) Figure 6: Unsupervised UMAP of the TFcheckpoint dataset using 12 neighbors. DbTFs proteins are colored atop the 2D embedding. Two distinct examples of DbTFs have been annotated: the AHDC1 and the Heat shock factor proteins. For \\(\\ge 8-10\\) neighbors, UMAP splits the dataset to \\(3\\) distinct TF protein superclusters: One of superclusters has strictly non-DbTFs and can be practically identified by one of the reduced dimensions (it does not matter which one you choose when observing more global views of the dataset, i.e. with larger number of neighbors, the following is enough: \\(X&gt;0 \\text{ or } Y&lt;0\\)). Interestingly, there is only one protein that is a DbTF and resides within this cluster as shown above and that protein is AHDC1. One supercluster has mostly DbTFs. A set of them is somewhat apart from the parent supercluster, namely the heat shock factor proteins. The complete list includes these proteins: HSF1, HSF2, HSF4, HSF5, HSFX1, HSFY1, HSFY2, HSFX2, HSFX3, HSFX4 (their \\((X,Y)\\) coordinates are really close and are thus presented as one point in the map). One supercluster has a mix of both DbTFs and non-DbTFs. Since this cluster is closer to the second one, it point to us the fact that the included non-DbTFs have molecular functions that are more similar to DbTFs compared with the far off first supercluster that includes the pure (so-to-speak) DbTFs. GREEKC curated DbTF list Members of the GREEKC consortium curated a list of DbTFs. Comparing this list with the proteins that have the GO term DNA binding in the TF checkpoint dataset we have the following contingency table (\\(1\\) corresponds to a DbTF label, \\(0\\) to a non-DbTF label): dbtf_stats = readRDS(file = &#39;data/dbtfs_go_greekc_stats.rds&#39;) knitr::kable(dbtf_stats) GO-DbTF GREEKC-DbTF n 0 0 2751 1 0 512 0 1 86 1 1 1356 We calculate the percent agreement and Cohen’s \\(\\kappa\\): n_total = dbtf_stats$n %&gt;% sum() data_00 = dbtf_stats %&gt;% filter(`GO-DbTF` == 0, `GREEKC-DbTF` == 0) %&gt;% pull(n) data_10 = dbtf_stats %&gt;% filter(`GO-DbTF` == 1, `GREEKC-DbTF` == 0) %&gt;% pull(n) data_01 = dbtf_stats %&gt;% filter(`GO-DbTF` == 0, `GREEKC-DbTF` == 1) %&gt;% pull(n) data_11 = dbtf_stats %&gt;% filter(`GO-DbTF` == 1, `GREEKC-DbTF` == 1) %&gt;% pull(n) # calculate percent agreement percent = (data_00 + data_11)/n_total scales::percent(percent) [1] &quot;87%&quot; # Cohen&#39;s kappa p0 = (data_00 + data_01)/n_total * (data_00 + data_10)/n_total p1 = (data_11 + data_01)/n_total * (data_11 + data_10)/n_total p_rand = p0 + p1 cohen_k = (percent - p_rand)/(1 - p_rand) scales::percent(cohen_k) [1] &quot;72%&quot; There is a substantial level of agreement between the GO DNA-binding annotation and the DbTF GREEKC list. Using the UMAP coordinates with \\(12\\) neighbors, we color the data points according to the GREEKC annotated DbTFs labels: knitr::include_graphics(path = &#39;img/12n_extra/tf_umap_12n_greekc_dbtfs.png&#39;) Figure 7: Unsupervised UMAP of the TFcheckpoint dataset using 12 neighbors. DbTFs proteins according to the curated GREEKC list are colored atop the 2D embedding. We also color the same points according to the values presented in the contingency table above (including thus all \\(4\\) cases of proteins as annotated by the GREEKC and the DNA-binding GO term): knitr::include_graphics(path = &#39;img/12n_extra/tf_umap_12n_go_vs_greekc_dbtfs.png&#39;) Figure 8: Unsupervised UMAP of the TFcheckpoint dataset using 12 neighbors. Proteins are pre-assigned to 4 groups depending on the value of the corresponding DNA-binding GO term and if are in the curated GREEKC list of DbTFs. There are a lot more DbTFs now residing inside the non-DbTF supercluster (top right) The bottom left supercluster with no DbTFs has become a bit more distinguished, i.e. almost all it’s points are non-DbTFs according to the GREEKC list information. Maybe the curated list better reflects the clustered data than the DNA-binding GO term thus? Tuning minimum distance Choosing \\(15\\) as a base value for the number of neighbors, we will tune the min_dist UMAP parameter which is the effective minimum distance between the embedded points (the default value presented in the previous figures was \\(0.01\\)). As the documentation says, smaller min_dist values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The idea here is to keep the separation of the \\(3\\) superclusters as much as possible, while spreading out the embedded points. knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_0.05.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_0.1.png&#39;) Figure 9: Unsupervised UMAP of the TFcheckpoint dataset using 15 neighbors and different values of the mind_dist parameter. DbTFs are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_0.3.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_0.5.png&#39;) Figure 10: Unsupervised UMAP of the TFcheckpoint dataset using 15 neighbors and different values of the mind_dist parameter. DbTFs are colored atop the 2D embedding. knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_0.7.png&#39;) knitr::include_graphics(path = &#39;img/tf_umap_15n_mindist_1.png&#39;) Figure 11: Unsupervised UMAP of the TFcheckpoint dataset using 15 neighbors and different values of the mind_dist parameter. DbTFs are colored atop the 2D embedding. For min_dist \\(\\gt 0.1\\), the separation of the superclusters (specifically for the \\(2\\) top-left ones) dissolves. GREEKC curated co-TF list Members of the GREEKC consortium curated also a list of co-TFs. This list has a total of \\(522\\) proteins, out of which only \\(239\\) are included in the TFcheckpoint dataset. Comparing this list of proteins with the curated list of DbTFs we have the following contingency table (\\(1\\) corresponds to the existence of a particular label, \\(0\\) to it’s absence), where no protein has been labeled both as a co-TF and a DbTF: db_cotf_stats = readRDS(file = &#39;data/db_cotf_stats.rds&#39;) knitr::kable(db_cotf_stats) GREEKC-DbTF GREEKC-coTF n 0 0 3024 1 0 1442 0 1 239 1 1 0 We now use the unsupervised UMAP result with \\(12\\) neighbors and color the proteins according to the three categories described above: knitr::include_graphics(path = &#39;img/12n_extra/tf_umap_12n_co_vs_dbtfs.png&#39;) Figure 12: Unsupervised UMAP of the TFcheckpoint dataset using 12 neighbors. Data points (proteins) have been colored according to their classification in the joint DbTF and co-TF GREEKC lists atop the 2D embedding We perform the same coloring with the UMAP coordinates from the \\(15\\) neighbors and different values of min_dist, to have a better picture of the clustering results: knitr::include_graphics(path = &#39;img/cotf_vs_dbtf/tf_umap_15n_mindist_0.05.png&#39;) knitr::include_graphics(path = &#39;img/cotf_vs_dbtf/tf_umap_15n_mindist_0.1.png&#39;) Figure 13: Unsupervised UMAP of the TFcheckpoint dataset using 15 neighbors and different values of the mind_dist parameter. Data points (proteins) have been colored according to their classification in the joint DbTF and co-TF GREEKC lists atop the 2D embedding knitr::include_graphics(path = &#39;img/cotf_vs_dbtf/tf_umap_15n_mindist_0.3.png&#39;) knitr::include_graphics(path = &#39;img/cotf_vs_dbtf/tf_umap_15n_mindist_0.5.png&#39;) Figure 14: Unsupervised UMAP of the TFcheckpoint dataset using 15 neighbors and different values of the mind_dist parameter. Data points (proteins) have been colored according to their classification in the joint DbTF and co-TF GREEKC lists atop the 2D embedding All above figures point to the following observations: - There are two distinct superclusters, one of them with mostly non-DbTFs and the other with a mix of co-TFs, DbTFs and non-DbTFs. - Non-DbTFs, as also observed in previous figures, do not reside in one, but two separate clusters, denoting two families of non-DbTF proteins. - The co-TF cluster (green) seems to be a pure subset of the non-DbTF cluster. R session info xfun::session_info() R version 3.6.3 (2020-02-29) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.1 LTS Locale: LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C Package version: assertthat_0.2.1 base64enc_0.1.3 bookdown_0.21 cli_2.1.0 colorspace_1.4-1 compiler_3.6.3 crayon_1.3.4 digest_0.6.27 dplyr_1.0.2 ellipsis_0.3.1 evaluate_0.14 fansi_0.4.1 farver_2.0.3 generics_0.0.2 glue_1.4.2 graphics_3.6.3 grDevices_3.6.3 highr_0.8 htmltools_0.5.0 jsonlite_1.7.1 knitr_1.30 labeling_0.4.2 lifecycle_0.2.0 magrittr_1.5 markdown_1.1 methods_3.6.3 mime_0.9 munsell_0.5.0 pillar_1.4.6 pkgconfig_2.0.3 png_0.1-7 purrr_0.3.4 R6_2.4.1 RColorBrewer_1.1.2 rlang_0.4.8 rmarkdown_2.5 scales_1.1.1 stats_3.6.3 stringi_1.5.3 stringr_1.4.0 tibble_3.0.4 tidyselect_1.1.0 tinytex_0.26 tools_3.6.3 utf8_1.1.4 utils_3.6.3 vctrs_0.3.4 viridisLite_0.3.0 xfun_0.18 yaml_2.2.1 References Carbon, S., E. Douglass, N. Dunn, B. Good, N. L. Harris, S. E. Lewis, C. J. Mungall, et al. 2019. “The Gene Ontology Resource: 20 years and still GOing strong.” Nucleic Acids Research 47 (D1): D330–D338. https://doi.org/10.1093/nar/gky1055. Chawla, Konika, Sushil Tripathi, Liv Thommesen, Astrid Lægreid, and Martin Kuiper. 2013. “TFcheckpoint: A curated compendium of specific DNA-binding RNA polymerase II transcription factors.” Bioinformatics 29 (19): 2519–20. https://doi.org/10.1093/bioinformatics/btt432. McInnes, Leland, John Healy, and James Melville. 2018. “UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction,” February. http://arxiv.org/abs/1802.03426 https://github.com/jlmelville/uwot. "]]
